#ifndef SPEAKER_H
#define SPEAKER_H

#include "plugin_base.h"

#include "oz_multiroom.h"

#include <TAS5731.h>

const register_data Default[] =
    {
        /*
            uint8_t data[1] = {0x00};
            write_register(DDX_SOFT_MUTE, data);
          */
        {DDX_CHANNEL1_VOL, {0x3D}},
        {DDX_CHANNEL2_VOL, {0x28}},
        {DDX_CHANNEL3_VOL, {0x30}},

        {DDX_IC_DELAY_CHANNEL_1, {0xB8}},
        {DDX_IC_DELAY_CHANNEL_2, {0x60}},
        {DDX_IC_DELAY_CHANNEL_3, {0xA0}},
        {DDX_IC_DELAY_CHANNEL_4, {0x48}},
        {DDX_INPUT_MUX, {0x0, 0x89, 0x77, 0x72}},

        {DDX_CH1_BQ_0, {0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}},
        {DDX_CH1_BQ_1, {0x0, 0x59, 0xE7, 0xC9, 0x3, 0x4C, 0x30, 0x6D, 0x0, 0x59, 0xE7, 0xC9, 0x0, 0xA8, 0x36, 0x8F, 0x3, 0xC0, 0x97, 0x68}},
        {DDX_CH1_BQ_2, {0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}},
        {DDX_CH1_BQ_3, {0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}},
        {DDX_CH1_BQ_4, {0x0, 0x79, 0x5C, 0x9, 0x3, 0x5A, 0x38, 0x46, 0x0, 0x46, 0x11, 0x23, 0x0, 0xA5, 0xC7, 0xBA, 0x3, 0xC0, 0x92, 0xD3}},
        {DDX_CH1_BQ_5, {0x0, 0x9B, 0x13, 0xE2, 0x3, 0xBF, 0xC0, 0x2C, 0x0, 0x47, 0x23, 0xE2, 0x0, 0x40, 0x3F, 0xD4, 0x3, 0x9D, 0xC8, 0x3B}},
        {DDX_CH1_BQ_6, {0x0, 0xBC, 0x92, 0x71, 0x2, 0xF2, 0x1D, 0x47, 0x0, 0x69, 0xAD, 0x4, 0x0, 0xA5, 0xCA, 0x7D, 0x3, 0xC1, 0xD8, 0xC7}},

        {DDX_CH2_BQ_0, {0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}},
        {DDX_CH2_BQ_1, {0x0, 0x7F, 0x77, 0xC7, 0x3, 0x1, 0x10, 0x72, 0x0, 0x7F, 0x77, 0xC7, 0x0, 0xFE, 0xEE, 0xFD, 0x3, 0x81, 0xF, 0xE1}},
        {DDX_CH2_BQ_2, {0x0, 0x7F, 0x86, 0xE2, 0x3, 0x0, 0xF2, 0x3B, 0x0, 0x7F, 0x86, 0xE2, 0x0, 0xFF, 0xD, 0x52, 0x3, 0x80, 0xF1, 0xC8}},
        {DDX_CH2_BQ_3, {0x0, 0x80, 0xC5, 0x2, 0x3, 0x1, 0x8E, 0x41, 0x0, 0x7D, 0xAF, 0x19, 0x0, 0xFE, 0x71, 0xBF, 0x3, 0x81, 0x8B, 0xE5}},
        {DDX_CH2_BQ_4, {0x0, 0x80, 0x2D, 0x26, 0x3, 0x1, 0xE3, 0x8C, 0x0, 0x7D, 0xF3, 0xD2, 0x0, 0xFE, 0x1C, 0x74, 0x3, 0x81, 0xDF, 0x8}},
        {DDX_CH2_BQ_5, {0x0, 0x7F, 0xB, 0xE3, 0x3, 0x12, 0xD7, 0xD9, 0x0, 0x6F, 0x6A, 0xAF, 0x0, 0xED, 0x28, 0x27, 0x3, 0x91, 0x89, 0x6D}},
        {DDX_CH2_BQ_6, {0x0, 0x7E, 0x35, 0x5C, 0x3, 0x28, 0x8C, 0x79, 0x0, 0x60, 0xD7, 0xD8, 0x0, 0xD7, 0x73, 0x87, 0x3, 0xA0, 0xF2, 0xCB}},

        {DDX_DRC1_AE, {0x0, 0x0, 0x22, 0x1D, 0x0, 0x7F, 0xDD, 0xE2}},
        {DDX_DRC1_AA, {0x0, 0x2, 0xA3, 0x9A, 0x0, 0x7D, 0x5C, 0x65}},
        {DDX_DRC1_AD, {0x0, 0x0, 0x6, 0xD3, 0x0, 0x7F, 0xF9, 0x2C}},
        {DDX_DRC2_AE, {0x0, 0x5, 0x39, 0x47, 0x0, 0x7A, 0xC6, 0xB8}},
        {DDX_DRC2_AA, {0x0, 0x5, 0x39, 0x47, 0x0, 0x7A, 0xC6, 0xB8}},
        {DDX_DRC2_AD, {0x0, 0x0, 0x0, 0xAE, 0x0, 0x7F, 0xFF, 0x51}},
        {DDX_DRC1_T, {0xFD, 0x62, 0x4C, 0x9F}},
        {DDX_DRC1_K, {0x3, 0x83, 0x33, 0x35}},
        {DDX_DRC1_O, {0x0, 0x8, 0x42, 0x10}},
        {DDX_DRC2_T, {0xFC, 0xE2, 0xBC, 0xBD}},
        {DDX_DRC2_K, {0x3, 0x8E, 0x38, 0xE5}},
        {DDX_DRC2_O, {0x0, 0x13, 0x95, 0x3C}},
        {DDX_DRC_CTL, {0x0, 0x0, 0x0, 0x3}},

        {DDX_CH1_BQ_7, {0x0, 0xB3, 0x98, 0x26, 0x3, 0x44, 0xED, 0x34, 0x0, 0x42, 0x83, 0xFC, 0x0, 0x6B, 0x24, 0x51, 0x3, 0xD9, 0xD2, 0x59}},
        {DDX_CH1_BQ_8, {0x0, 0x86, 0xB6, 0x6A, 0x3, 0x5B, 0x36, 0x2, 0x0, 0x62, 0x55, 0x96, 0x0, 0xA4, 0xC9, 0xFE, 0x3, 0x96, 0xF4, 0x0}},
        {DDX_SUBCHANNEL_BQ_0, {0x0, 0x0, 0x5, 0x83, 0x0, 0x0, 0xB, 0x6, 0x0, 0x0, 0x5, 0x83, 0x0, 0xFB, 0x42, 0xC1, 0x3, 0x84, 0xA7, 0x33}},
        {DDX_SUBCHANNEL_BQ_1, {0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}},
        {DDX_CH2_BQ_7, {0x0, 0x7, 0xBE, 0x54, 0x0, 0xF, 0x7C, 0xA9, 0x0, 0x7, 0xBE, 0x54, 0x0, 0x98, 0xD0, 0x7C, 0x3, 0xC8, 0x36, 0x31}},
        {DDX_CH2_BQ_8, {0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}},
        {DDX_PSEUDO_CH2_BQ_0, {0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}

};

template <typename T, size_t N>
size_t Size(T(&)[N])
{
    return N;
}



#define SPEAKER_STR_BCK  "bck"
#define SPEAKER_STR_RLC  "rlc"
#define SPEAKER_STR_DIN  "din"
#define SPEAKER_STR_PVDD "pvdd"
#define SPEAKER_STR_PDN  "pdn"
#define SPEAKER_STR_RST  "reset"
#define SPEAKER_STR_SCL  "scl"
#define SPEAKER_STR_SDA  "sda"



typedef enum
{
    SPEAKER_STATE_OFF = 0x0, 
    SPEAKER_STATE_STOP = 0x1, 
    SPEAKER_STATE_PLAY = 0x2 
} speaker_state_t;



#define MAX_WDT_SPEAKER_COUNT 10

/**     
 *     Speaker based on tas5731
 * 
 *     network -> i2s 
 *
 */
class speaker : public plugin_base
{
public:
    speaker(params_t init);

    static speaker *COTR(params_t init) { return new speaker(init); }

    static params_t PARAM()
    {
        return params_t{
            {PLUGIN_BASE_STR_NAME, PLUGIN_STR_NAN},
            {SPEAKER_STR_BCK , PLUGIN_STR_NAN},
            {SPEAKER_STR_RLC , PLUGIN_STR_NAN},
            {SPEAKER_STR_DIN , PLUGIN_STR_NAN},
            {SPEAKER_STR_PVDD, PLUGIN_STR_NAN},
            {SPEAKER_STR_PDN , PLUGIN_STR_NAN},
            {SPEAKER_STR_RST , PLUGIN_STR_NAN},
            {SPEAKER_STR_SCL , "-1"},
            {SPEAKER_STR_SDA , "-1"},
        };
    }

    void start_task();
    void stop_task();

    uint8_t wdt_count=0;

    unsigned long sensor_delay();

protected:
    void _send_response(String Topic, String Message) override;
    void _force_update() override;
    void _public_state();
    void _execute_sensor();
    

    void _start_tas5731();
    void _stop_tas5731();

    String  _topic_volume,
            _topic_volume_state,
            _topic_action,
            _topic_state;

    oz_multiroom _mr;

    TimerHandle_t _start_task_handle,_stop_task_handle;

    TAS5731 * _speaker_dac;

    uint8_t volume;

    speaker_state_t _state = SPEAKER_STATE_OFF;

};
#endif